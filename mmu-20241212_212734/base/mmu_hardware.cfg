## Happy Hare MMU hardware config file with config for EASY-BRD-RP2040
##
## Common external mcus:
## 1) EASY-BRD
##  J6 Jumper setting
##   Option 1: Pins 2-3 and 4-5, i.e.  .[..][..] (recommended)
##   This allows for option of "touch" selector setup. Note that this enables the option disables the "extra"
##   switch so the toolhead sensor (if used) would have to be connected to the main mcu
##
##   Option 2: Pins 1-2 and 4-5, i.e.  [..].[..]
##   It you don't care about selector touch operation. The "extra" switch is enabled for other uses
##
##  Note that the EASY-BRD does not expose the DIAG pin for the gear stepper
##
## 2) Fysetc Burrows ERB
##  No jumper configuration is required for Fysetc Burrows ERB board. Both Selector and Gear DIAG pins are exposed
##
##  ERB firmware flashing notes:
##   Must have 12v/24v supply connected
##    > make menuconfig (rpi2040, No bootloader)
##    > make
##  Put card in boot loader mode: Press & Hold 'BOOTSEL' ; click 'RST; ; Release 'BOOTSEL'
##    > make flash FLASH_DEVICE=2e8a:0003
##
## ------
##
## Note about "touch" endstops: Happy Hare provides extremely flexible homing options using both single steppers or synced steppers.
## The "touch" options leverage stallguard and thus require the appropriate 'diag_pin' and stallguard parameters set on the TMC driver
## section.  If you have the diag_pin exposed, it is harmless to define this because they will only be used when explicitly needed
## and configured.
##
## Touch option for each stepper provides these benefits / possibilities:
##  - on extruder stepper allows for the automatic detection of the nozzle!!
##  - on selector stepper allows for the automatic detection of filament stuck in the gate and subsequent recovery
##  - on gear stepper allows for the automatic detection of the extruder entrance
##
## These sound wonderful right?  They are, but there are caveats:
##  - The external EASY-BRD and ERB mcu's are terrible at detecting stallguard and often result in an "undervoltage error". It is generally
##    possible to get selector touch (TMC2209) tuned especially if you set 'stealthchop_threshold' to a value greater than homing speeds and
##    less than move speed. I.e. the stepper runs in stealthchop mode when homing. [klipper experts will know that it switches the chip mode
##    automatically to stealthchop and then back for Stallguard2 support, howver the automatic switching back to spreadcycle at the end homing
##    move seems to provoke the error condition and setting 'shealthchip_threshold' appropriately avoids this condition. More than you wanted
##    to know I'm sure!
##  - I have not had much luck with touch (stallguard) on the gear stepper with EASY-BRD and ERB mcu's and you really want the extra torque
##    of spreadcycle so adjusting 'stealthchop_threshold' is not really an option
##  - Enabling on the extruder stepper is viable but you will likley have to change jumpers on your main mcu to expose the DIAG pin for
##    whichever driver the extruder stepper is connected to.
##
## In summary, "touch" homing with your MMU is an advanced option that requires patience and careful tuning.  Luckily everything works with
## regular endstops and there are creative workaround options for certain homing points (like extruder entry) in the absence of any endstop.
## I'm really interested in creative setups that you come up with. Ping me on Discord (moggieuk#6538)
##
##
## See mmu.cfg for serial definition and pins aliaes
##


# HOMING CAPABLE EXTRUDER --------------------------------------------------------------------------------------------------
# With Happy Hare installed the extruder can be homed.  You will find the usual 'endstop' parameters can be added to your
# '[extruder]' section.  Useless you have some clever load cell attached to your nozzle it only really makes sense to configure 
# stallguard style "touch" homing. To do this add lines similar to this to your existing '[extruder]' definition whether
# you have it defined in printer.cfg.
#
# [extruder]
# endstop_pin: tmc2209_extruder:virtual_endstop
#
# Also be sure to add the appropriate stallguard config to the TMC section, e.g.
#
# [tmc2209 extruder]
# diag_pin: E_DIAG			# Set to MCU pin connected to TMC DIAG pin for extruder
# driver_SGTHRS: 100			# 255 is most sensitive value, 0 is least sensitive
#
# Happy Hare will take care of the rest and add a 'mmu_ext_touch' endstop automatically


# FILAMENT DRIVE GEAR STEPPER  ---------------------------------------------------------------------------------------------
# Note that 'mmu_toolhead' endstop will automatically be added if a toolhead sensor is defined
#
# The default values are tested with the BOM NEMA14 motor. Please adapt these values to the motor you are using
# Example : for NEMA17 motors, you'll usually use higher current
#
[tmc5160 stepper_mmu_gear]
cs_pin: mmu:MMU_GEAR_UART
#uart_address: 0 			# Comment out for ERB board
interpolate: True
run_current: 0.5			# ERCF BOM NEMA14 motor
hold_current: 0.1			# Recommend to be small if not using touch homing or move (TMC stallguard)
sense_resistor: 0.110			# Usually 0.11, 0.15 for BTT TMC2226
stealthchop_threshold: 0		# Spreadcycle has more torque and better at speed
#
# Uncomment two lines below if you have TMC and want the ability to use filament "touch" homing with gear stepper
diag1_pin: ^!mmu:MMU_GEAR_DIAG		# Set to MCU pin connected to TMC DIAG pin for gear stepper
driver_SGT: -33			# -64 is most sensitive value, 63 is least sensitive
spi_software_sclk_pin: mmu:PA5
spi_software_mosi_pin: mmu:PA7
spi_software_miso_pin: mmu:PA6

[stepper_mmu_gear]
step_pin: mmu:MMU_GEAR_STEP
dir_pin: mmu:MMU_GEAR_DIR
enable_pin: !mmu:MMU_GEAR_ENABLE
rotation_distance: 22.7316868		# Bondtech 5mm Drive Gears. Will be overriden by `mmu_gear_rotation_distance` in mmu_vars.cfg
gear_ratio: 80:20			# ERCF 80:20, Tradrack 50:17
microsteps: 16 				# Recommend 16
full_steps_per_rotation: 200		# 200 for 1.8 degree, 400 for 0.9 degree
#
# Uncomment the two lines below to enable filament "touch" homing option with gear motor
extra_endstop_pins: tmc5160_stepper_mmu_gear:virtual_endstop
extra_endstop_names: mmu_gear_touch
homing_retract_dist: 0

# SELECTOR STEPPER  --------------------------------------------------------------------------------------------------------
#
[tmc5160 stepper_mmu_selector]
cs_pin: mmu:MMU_SEL_UART
#uart_address: 1 			# Comment out for ERB board
run_current: 0.4			# ERCF BOM NEMA17 motor
hold_current: 0.2			# Can be small if not using touch homing or move (TMC stallguard)
interpolate: True
sense_resistor: 0.110
stealthchop_threshold: 100		# Stallguard homing (slower speeds) best done with stealthchop
#
# Uncomment two lines below if you have TMC and want to use selector "touch" movement and homing
diag1_pin: ^!mmu:MMU_SEL_DIAG 		# Set to MCU pin connected to TMC DIAG pin for selector stepper
driver_SGT: 2			# -64 is most sensitive value, 63 is least sensitive
spi_software_sclk_pin: mmu:PA5
spi_software_mosi_pin: mmu:PA7
spi_software_miso_pin: mmu:PA6


[stepper_mmu_selector]
step_pin: mmu:MMU_SEL_STEP
dir_pin: mmu:MMU_SEL_DIR
enable_pin: !mmu:MMU_SEL_ENABLE
rotation_distance: 40
microsteps: 16 				# Don't need high fidelity
full_steps_per_rotation: 200		# 200 for 1.8 degree, 400 for 0.9 degree
endstop_pin: ^mmu:MMU_SEL_ENDSTOP	# Selector microswitch
endstop_name: mmu_sel_home
#
# Uncomment two lines below to give option of  selector "touch" movement and homing
extra_endstop_pins: tmc5160_stepper_mmu_selector:virtual_endstop
extra_endstop_names: mmu_sel_touch
homing_retract_dist: 0

# SELECTOR SERVO -----------------------------------------------------------------------------------------------------------
# Basic servo PWM setup. If these values are changed then the angles defined for different positions will also change
#
[mmu_servo mmu_servo]
pin: mmu:MMU_SERVO
maximum_servo_angle: 180
minimum_pulse_width: 0.00085
maximum_pulse_width: 0.00215


# ENCODER -----------------------------------------------------------------------------------------------------------------
# Encoder measures distance, monitors for runout and clogging and constantly calculates % flow rate
# Note that the encoder_resolution set if is purely a default to get started.  It is set through calibration
# and stored in mmu_vars.cfg
#
[mmu_encoder mmu_encoder]
encoder_pin: ^mmu:MMU_ENCODER		# EASY-BRD: ^PA6, Flytech ERB: ^gpio22
encoder_resolution: 1.0			# This is just a starter value. Overriden by `mmu_encoder_resolution` in mmm_vars.cfg
desired_headroom: 5.0			# The clog/runout headroom that MMU will attempt to maintain (closest MMU comes to triggering runout)
average_samples: 4			# The "damping" effect of last measurement. Higher value means clog_length will be reduced more slowly
flowrate_samples: 20			# How many "movements" on the encoder to measure over for flowrate calc


# FILAMENT SENSORS ---------------------------------------------------------------------------------------------------------
# Define the pins for (shared) sensors in the filament path. These will be automatically setup as both endstops (for homing)
# and sensors for visibility purposes. Note that if your MMU has sensors at each gate then these should be defined as endstops
# on each of the gear steppers
#
# Optional 'toolhead' sensor detects filament after extruder entry
# Optional 'extruder' sensor detects filament just before the extruder entry
# Optional shared 'gate' sensor detects filament at the gate of the MMU
#
# Uncomment sensors that are fitted
#

[mmu_sensors]
pre_gate_switch_pin_0: ^mmu:MMU_PRE_GATE_0
pre_gate_switch_pin_1: ^mmu:MMU_PRE_GATE_1
pre_gate_switch_pin_2: ^mmu:MMU_PRE_GATE_2
pre_gate_switch_pin_3: ^mmu:MMU_PRE_GATE_3
pre_gate_switch_pin_4: ^mmu:MMU_PRE_GATE_4
pre_gate_switch_pin_5: ^mmu:MMU_PRE_GATE_5
pre_gate_switch_pin_6: ^mmu:MMU_PRE_GATE_6
pre_gate_switch_pin_7: ^mmu:MMU_PRE_GATE_7
#pre_gate_switch_pin_8: ^mmu:MMU_PRE_GATE_8
#pre_gate_switch_pin_9: ^mmu:MMU_PRE_GATE_9
#pre_gate_switch_pin_10: ^mmu:MMU_PRE_GATE_10
#pre_gate_switch_pin_11: ^mmu:MMU_PRE_GATE_11

#gate_switch_pin: ^mmu:MMU_GATE_SENSOR
extruder_switch_pin: ^sb2209:PB8
toolhead_switch_pin: ^sb2209:PB9

## MMU OPTIONAL NEOPIXEL LED SUPPORT ----------------------------------------------------------------------------------------
##
## Define neopixel LEDs for your MMU. The chain_count should match or be greater than your number of gates.
## Requires the installation of Julian Schill's awesome LED effect module: https://github.com/julianschill/klipper-led_effect
## LED index 1..N should be connected from gate #0 to gate #N
## LED index N+1 can optionally be connected to exit from MMU (like encoder in ERCF design)
##
[neopixel mmu_leds]
pin: mmu:MMU_NEOPIXEL
chain_count: 8		# Number gates + 1 (if you want exit effect)
color_order: GRB			# Set based on your particular neopixel specification
#
##
## Define LED effects for MMU gate. 'mmu_led_effect' is a wrapper for led_effect
## (if included on your system) and will accept and create the defined effect on both
## the entire specified part of the strip with the name you supply but also on each
## individual LED up to N+1 gates by adding `_<gate+1>` suffix. This makes it much
## easier to have per gate effects.
##
## E.g. You define mmu_flash on a 3 gate MMU:
##  [mmu_led_effect mmu_flash]
##
## This will create effects:
##  mmu_flash on whole define strip
##  mmu_flash_1 on for gate 0 (LED index 1)
##  mmu_flash_2 on for gate 1 (LED index 2)
##  mmu_flash_3 on for gate 2 (LED index 3)
##  mmu_flash_4 for MMU exit  (LED index 4)
##
## Then you can set effects with commands like:
##  SET_LED_EFFECT EFFECT=_mmu_flash      # apply effect to all leds in strip
##  SET_LED_EFFECT EFFECT=_mmu_flash_1    # apply effect to the second led (gate 0)
##
## or set simple RBGW color with commands like:
##  SET_LED LED=mmu_led INDEX=2 RED=50 GREEN=50 BLUE=50 WHITE=0 TRANSMIT=1
##
## Note that gates start from 0, LED index starts from 1, so by default, index = gate + 1
## Ranges are constrained as much as possible to allow for additional custom LEDs
## to be wired after the N+1 position
##
#
## These are used selectively on gate LEDs and exit LED...
[mmu_leds]
num_gates: 8
led_strip: neopixel:mmu_leds
exit_range: 8-1
#entry_range: 1-8
#status_index: 0
frame_rate: 24
