[gcode_macro _STATUS_VARIABLES]
variable_printer_status			: "READY"
variable_status_effect_macros	: ["_STATUS_CONSOLE", "_STATUS_KLIPPER_SCREEN", "_STATUS_LED_CL", "_STATUS_LED_SB"]
gcode:


[gcode_macro SET_STATUS]
description: Set Printer Status
gcode:
	{% if params.S %}
		{% set status = params.S|default("READY") %}
	{% else %}
		{% set status = params.STATUS|default("READY") %}
	{% endif %}
#	{ action_respond_info("In SET_STATUS found: " ~ status) }
	SET_GCODE_VARIABLE MACRO=_STATUS_VARIABLES VARIABLE=printer_status	VALUE="'{status}'"
	_EFFECT_STATUS

[gcode_macro RESET_STATUS]
gcode:
	{% if params.D %}
		{% set delay = params.D|default(2) %}
	{% else %}
		{% set delay = params.DELAY|default(2) %}
	{% endif %}
#	{ action_respond_info("Reset status in: " ~ delay) }
#	UPDATE_DELAYED_GCODE ID=_DELAYED_RESET_STATUS DURATION={delay}
	G4 P{delay*1000}
	SET_STATUS

#[delayed_gcode _DELAYED_RESET_STATUS]
#gcode:
#	SET_STATUS

[gcode_macro _EFFECT_STATUS]
gcode:
	# put in a count of array size some how, increment through and recursively call UPDATE_DELAYED_GCODE until counter is through all is better than for eaching through all right here and dumping them all on stack?
	{% set status = printer['gcode_macro _STATUS_VARIABLES'].printer_status %}
	{% for macro in printer['gcode_macro _STATUS_VARIABLES'].status_effect_macros %}
#		{ action_respond_info("Effecting Macro: " ~ macro ~ " with: " ~ status) }
		{macro}
	{% endfor %}
	
[gcode_macro _STATUS_CONSOLE]
gcode:
	{% set status = printer['gcode_macro _STATUS_VARIABLES'].printer_status %}
	{% if not status.endswith('_END') %}
		{ action_respond_info("Printer status is: " ~ status.replace('_', ' ') | title) }
	{% endif %}

[gcode_macro _STATUS_KLIPPER_SCREEN]
gcode:
	{% set status = printer['gcode_macro _STATUS_VARIABLES'].printer_status %}
	{% if not status.endswith('_END') and not status == 'READY' %}
		M118 {status.replace('_', ' ') | title}
		UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=2
	{% endif %}

#############  HARDCODE OVERLOADS  ################

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: QUAD_GANTRY_LEVEL_LED
gcode:
	SET_STATUS STATUS=LEVELING
	QUAD_GANTRY_LEVEL_LED {rawparams}
	SET_STATUS STATUS=LEVELING_END

[gcode_macro G28]
rename_existing: G28.1
gcode:
	SET_STATUS STATUS=HOMING
	G28.1 {rawparams}
#	RESET_STATUS
	SET_STATUS STATUS=HOMING_END
	
[gcode_macro M109]
rename_existing: M109.1
gcode:
	{% if rawparams %}
		{% set s_tmp = rawparams.split('S', 1)[1] %}
		{% if s_tmp == "150" %}
			{ action_respond_info('warming: ' ~ s_tmp) }
			SET_STATUS STATUS=WARMING_HOTEND
			M109.1 {rawparams}
			SET_STATUS STATUS=WARMING_HOTEND_END
		{% else %}
			{ action_respond_info('heating: ' ~ s_tmp) }
			SET_STATUS STATUS=HEATING_HOTEND
			M109.1 {rawparams}
			SET_STATUS STATUS=HEATING_HOTEND_END
		{% endif %}
	{% endif %}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_LED
gcode:
	SET_STATUS STATUS=MESHING
	BED_MESH_CALIBRATE_LED {rawparams}
	SET_STATUS STATUS=MESHING_END

[gcode_macro TEMPERATURE_WAIT]
rename_existing: TEMPERATURE_WAIT_SI
gcode:
	{% if params.SENSOR|upper == "HEATER_BED" %}
		SET_STATUS S=HEATING_BED
	{% elif params.SENSOR|upper == "EXTRUDER" %}
		# {% if params.MINIMUM is defined and params.MINIMUM | int < 140 %}
			# { action_respond_info('cooling hotend') }
			# SET_STATUS STATUS=COOLING_HOTEND
		# {% elif params.MAXIMUM is defined and params.MAXIMUM | int < 140 %}
			# { action_respond_info('cooling hotend') }
			# SET_STATUS STATUS=COOLING_HOTEND
		{% if params.MINIMUM is defined and params.MINIMUM | int > 140 and params.MINIMUM | int < 160 %}
			{ action_respond_info('warming hotend') }
			SET_STATUS STATUS=WARMING_HOTEND
		{% elif params.MAXIMUM is defined and params.MAXIMUM | int > 140 and params.MAXIMUM | int < 160 %}
			{ action_respond_info('warming hotend') }
			SET_STATUS STATUS=WARMING_HOTEND
		{% else %}
			{ action_respond_info('heating hotend') }
			SET_STATUS STATUS=HEATING_HOTEND
		{% endif %}
	{% endif %}
	TEMPERATURE_WAIT_SI {rawparams}
	{% if params.SENSOR|upper == "HEATER_BED" %}
		SET_STATUS S=HEATING_BED_END
	{% elif params.SENSOR|upper == "EXTRUDER" %}
		# {% if params.MINIMUM is defined and params.MINIMUM | int < 140 %}
			# { action_respond_info('cooling hotend done') }
			# SET_STATUS STATUS=COOLING_HOTEND_END
		# {% elif params.MAXIMUM is defined and params.MAXIMUM | int < 140 %}
			# { action_respond_info('cooling hotend done') }
			# SET_STATUS STATUS=COOLING_HOTEND_END
		{% if params.MINIMUM is defined and params.MINIMUM | int > 140 and params.MINIMUM | int < 160 %}
			{ action_respond_info('warming hotend done') }
			SET_STATUS STATUS=WARMING_HOTEND_END
		{% elif params.MAXIMUM is defined and params.MAXIMUM | int > 140 and params.MAXIMUM | int < 160 %}
			{ action_respond_info('warming hotend done') }
			SET_STATUS STATUS=WARMING_HOTEND_END
		{% else %}
			{ action_respond_info('heating hotend done') }
			SET_STATUS STATUS=HEATING_HOTEND_END
		{% endif %}
	{% endif %}
	
[gcode_macro CARTOGRAPHER_TOUCH]
rename_existing: CARTOGRAPHER_TOUCH_LED
gcode:
	SET_STATUS STATUS=CALIBRATING_Z
	CARTOGRAPHER_TOUCH_LED {rawparams}
	SET_STATUS STATUS=CALIBRATING_Z_END

# [gcode_macro SET_HEATER_TEMPERATURE]
# rename_existing: SET_HEATER_TEMPERATURE_SI
# gcode:
	# {% if params.HEATER|upper == "HEATER_BED" %}
		# SET_STATUS S=HEATING_BED
	# {% elif params.HEATER|upper == "EXTRUDER" %}
		# SET_STATUS S=HEATING_EXTRUDER
	# {% endif %}
	# SET_HEATER_TEMPERATURE_SI {rawparams}
	