#####################################################################
#   Macro redefinitions
#####################################################################
# [gcode_macro M109]
# rename_existing: M109.1
# gcode:
  # {% set S = params.S|float %}
  # {% set actual_temp = printer.extruder.temperature|float %}
  # {% set max_fuzzy = S + 2 %}

  # M104 { rawparams } 
  # {% if S != 0 %}
    # {% if actual_temp <= S %} TEMPERATURE_WAIT SENSOR=extruder MINIMUM={S}
    # {% else %}                TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={max_fuzzy} {% endif %}   
  # {% endif %}

[include macros/nozzle-scrub.cfg]
[include macros/fluidd_macros.cfg]
[include macros/test-speed.cfg]
[include macros/status.cfg]

#####################################################################
#   Macros
#####################################################################

[gcode_macro _Greg_Vars]
variable_keep_on_state:                  0
gcode:

[gcode_macro TOGGLE_KEEP_ON]
gcode:
    {% set keep_on_state = printer["gcode_macro _Greg_Vars"].keep_on_state %}
	{% if keep_on_state > 0 %}
		SET_GCODE_VARIABLE MACRO=_Greg_Vars VARIABLE=keep_on_state VALUE={ 0 }
		M117 After print ends printer will turn off.
		M118 After print ends printer will turn off.
		UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=2
	{% else %}
		SET_GCODE_VARIABLE MACRO=_Greg_Vars VARIABLE=keep_on_state VALUE={ 1 }
		M117 After print ends printer will stay on.
		M118 After print ends printer will stay on.
		UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=2
	{% endif %}

[gcode_macro M600]
gcode:
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F4000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro HOME_IF_NEEDED]
gcode:
	{% if printer.toolhead.homed_axes != "xyz" %}
		M117 Perform Homing.
		M118 Perform Homing.
		UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=5
		G28
	{% endif %}

[gcode_macro PERFORM_CORNER_PROBE_ACCURACY]
gcode:
	G0 X50 Y25 Z20 F4000
	PROBE_ACCURACY SAMPLES=30
	G0 X50 Y225 Z20 F4000
	PROBE_ACCURACY SAMPLES=30
	G0 X250 Y225 Z20 F4000
	PROBE_ACCURACY SAMPLES=30
	G0 X250 Y25 Z20 F4000
	PROBE_ACCURACY SAMPLES=30


[gcode_macro CENTER]
gcode:
	G90
	G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F7200
	
[gcode_macro CENTER_Z]
gcode:
	G90
	G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } Z{ printer.toolhead.axis_maximum.z/2 } F7200

[gcode_macro G32]
gcode:
	LEDS_OFF
	BED_MESH_CLEAR
	HOME_IF_NEEDED
	QUAD_GANTRY_LEVEL
	M117 Perform Final Z-Homing.
	M118 Perform Final Z-Homing.
	UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=5
	G28 Z						; Z may be slightly different after QGL
	PARK_HEAD_OVER_BUCKET
	BED_MESH_PROFILE load=default
	LED_STATUS_READY

[delayed_gcode POWER_DOWN]
gcode:
	M117 Turning off Nevermore Fan and motors.
	M118 Turning off Nevermore Fan and motors.
	UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=5
 	SET_FAN_SPEED FAN=BedInner SPEED=0.0
	M18
	
[gcode_macro PRINT_START]
description: Start Print
gcode:
	{% set BED_TEMP = params.BED_TEMP|default(110)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(250)|float %}

#### The following block is moved to the slicer due to MoggieUK's discovery of the 'long running macros' problem
#	M140 S{BED_TEMP}
#	
#	LEDS_OFF
#	
#	HOME_IF_NEEDED
#	M109 S150 ; go to 150C
#	CLEAN_NOZZLE
#	
#	BED_MESH_CLEAR ; prep for adaptive bed mesh
#	
#	G28 Z
#	QUAD_GANTRY_LEVEL
#	G28 Z
#	
#	SET_NOZZLE_LEDS_ON
#	
#	BED_MESH_CALIBRATE ADAPTIVE=1
#	M400
#	CARTOGRAPHER_TOUCH RETRIES=20
#	M400 ; wait for all moves to cease
#	PARK_HEAD_OVER_BUCKET
#	
#	M109 S{EXTRUDER_TEMP}
#	
#	TOGGLE_CASELIGHT_WHITE
#	
#	MMU_START_LOAD_INITIAL_TOOL
#	
#	CLEAN_NOZZLE
#	CENTER
#	
	# Reset things like flow-rate, speed, etc.
	M220 S100
	M221 S100
	
	# Clear any timer to stop the nevermore fans
	UPDATE_DELAYED_GCODE ID=POWER_DOWN DURATION=0

	SET_STATUS STATUS=PRINTING
	SKEW_PROFILE LOAD=CaliFlower

[gcode_macro GREG_ON_PAUSE]
gcode:
	LED_STATUS_CRITICAL_ERROR
	
[gcode_macro GREG_ON_RESUME]
gcode:
	LED_STATUS_CRITICAL_ERROR_END

[gcode_macro GREG_ON_CANCEL]
gcode:

[gcode_macro PARK_HEAD_OVER_BUCKET]
# Relatively move Z up slightly, then put the head over the bucket.
gcode:
	G91
	G1 Z2 F4000
	G90
	G0 X105 Y299 F4000

[gcode_macro PRINT_END]
#	Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
	LED_STATUS_BUSY

	M117 Moving toolhead to safe anti-stringing coords.
	M118 Moving toolhead to safe anti-stringing coords.
	UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=5
	{% set th = printer.toolhead %}
	{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
	{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
	{% set z_safe = [th.position.z + 50, th.axis_maximum.z]|min %}

	SAVE_GCODE_STATE NAME=STATE_PRINT_END

	M400							; wait for buffer to clear
	G92 E0							; zero the extruder
	G1 E-2.0 F3600					; retract filament

	G90								; absolute positioning
	G0 Z{z_safe} F2400				; move nozzle to remove stringing
	G0 X{x_safe} Y{y_safe} F20000	; move nozzle to remove stringing
	G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 30} F4000	; park nozzle at rear
	LED_STATUS_BUSY_END
	LED_STATUS_PART_READY

	SET_SKEW CLEAR=1
	MMU_END
	
    {% set keep_on_state = printer["gcode_macro _Greg_Vars"].keep_on_state %}
	{% if keep_on_state > 0 %}
		M117 Keeping the heaters and fans on.
		M118 Keeping the heaters and fans on.
		SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150
		UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=5
	{% else %}	
		M117 Ejecting the last tool.
		M118 Ejecting the last tool.
		MMU_UNLOAD
		
		M117 Turning the heaters and eventually the fans off.
		M118 Turning the heaters and eventually the fans off.
		UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=5
		
		TURN_OFF_HEATERS
		# Prep the nevermore to turn off after some time
		UPDATE_DELAYED_GCODE ID=POWER_DOWN DURATION=900
		# Turn the nevermore back on to clean up the air
		SET_FAN_SPEED FAN=BedInner SPEED=1.0
	{% endif %}

	M107							; turn off part cooling fan

	UPDATE_DELAYED_GCODE ID=LED_STATUS_PART_READY_END_DELAYED DURATION=5
	
	# BED_MESH_CLEAR				; Removed by Greg -- I want to keep the bed_mesh
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END


[delayed_gcode LED_STATUS_PART_READY_END_DELAYED]
gcode:
	LED_STATUS_PART_READY_END
	LEDS_OFF

[delayed_gcode _CLEAR_DISPLAY]
gcode:
	M117

[gcode_macro HEAT_SOAK]
description: Heats the bed and performs a soak. BED=110 DURATION=6 (minutes)

variable_target_bed_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set BED = params.BED | default(110) | float %}
    {% set DURATION = (params.DURATION | default(6) | int) * 60 %} ## minutes to seconds

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_bed_temp     VALUE={ BED }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
	SET_STATUS STATUS=HEATING_BED
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ BED }
	HOME_IF_NEEDED
	CENTER

    UPDATE_DELAYED_GCODE ID=HEAT_SOAKER DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: Cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=HEAT_SOAKER DURATION=1

[delayed_gcode HEAT_SOAKER]
## debug
# { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_bed_temp %}
        {% set stage = "soaking" %}
		SET_STATUS STATUS=HEATING_BED_END
		SET_STATUS STATUS=HEAT_SOAKING
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
            M118 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
			SET_STATUS STATUS=HEAT_SOAKING_END
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
            M118 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
			SET_STATUS STATUS=HEAT_SOAKING_END
			SOAK_COMPLETE
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_bed_temp     VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
                M118 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
                M118 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=HEAT_SOAKER DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}

[gcode_macro SOAK_COMPLETE]
description: Finish the soak command
gcode:
	M109 S150
	G32
